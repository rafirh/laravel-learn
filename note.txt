Yang sudah diimplementasikan:
    1. Routing:
        - dir: Routes/web.php
        - write: Route::get('(endpoint)', [(class controller)::class, 'function name']);
        - example: Route::get('/', [HomeController::class, 'index']);
    2. Models
        - dir: App/Models
    3. Controller
        - dir: App/http/Controller
    4. Partials / Component
        - dir: resourses/views/partials
        - example: navbar, footer, card.
    5. Database Migration:
        - migrate
        - migrate:rollback
        - migrate:fresh
    6. Tinker
        - how to acces: php artisan tinker
        - $user = new App\Models\User (acces class user Models)
        - $user = new User (create new object)
        - $user -> save() (save object to database)
        - $user -> all() (get all data from user table)
    7. Valet
        - Deploy a webite with local host (example.test)
    8. API
        - REST adalah REpresentational State Transfer atau gaya arsitektur untuk menyediakan standar antara sistem komputer di web, sehingga memudahkan sistem untuk saling berinteraksi.
        - Contoh kaidah rest api adalah penggunaan endpoint yang sama dalam satu model, hanya dibedakan dari method nya saja.
        - RESTful api adalah sebuah api yang sudah mengimplementasikan prinsip-prinsip rest api.

Method-method dalam model laravel:
    misal = - class model: Post
    1. Post::all(); //mendapatkan semua data dari model Post.
    2. $post = new Post; //membuat object baru.
    3. Post->save(); //menyimpan object post ke database.
    4. Post::create([
        "title" => "this is title",
        "excerpt" => "wkwk",
        "body" => "hahaha"
    ]) // berfungsi untuk menambahkan data ke model post.
    5. Post::where('title', 'wkwk') -> update (['title', 'judul baru']); //mengubah title dari 'wkwk' ke 'judul baru' dimana title == wkwk.
    6. Post::first(); //mengambil data pertama pada model post.
    7. Post::find(1); //mengambil data yang ber id kan 1

Episode 8: 
    1. protected $guarded = ['id']; // berfungsi agar field id dijaga agar tidak diisi dengan mass assignment
    2. $table->foreignId('category_id'); // berfungsi menambahkan field foreign key yang nantinya digunakan untuk relasi table
    3. Category::function() // berfungsi untuk memanggil method yang ada di class category seperti all(), first(), create(), dll
    4. One to many // menggunakan method hasMany(), contoh one to many adalah tabel category berelasi ke tabel post
    5. Many to one // menggunakan method belongsTo()
    6.  public function category(){
            return $this->belongsTo(Category::class); // sebuah post meiliki satu kategori 
        }
        fungsi ini digunakan untuk merelasikan model post dengan model category yang ditulis di class model post.
    7. public function post(){
        return $this->hasMany(Post::class); // satu kategori memiliki banyak post.
    }
    8. Post::first()->category->name; // mengambil data berupa nama category berdasarkan category_id di postingan pertama.
    9. hasMany() berkebalikan dengan belongsTo(), category hasMany() posts dan post belongsTo category.
    
Episode 9:
    1. $table->foreignId('user_id'); // digunakan untuk perantara untuk merelasikan tabel posts dengan tabel user berdasarkan user_id.
    2. seeder digunakan untuk mengisi, menghapus, dan update (DML) data pada tabel tertentu.
    3. migration digunakan untuk membuat database dan tabel didalammya (DDL).
    4. php artisan db:seed // digunakan untuk menjalankan perintah yang ada di DatabaseSeeder.php.
    5. php artisan db:seed // hanya bisa dilakukan sekali jika terdapat data yang di set unique
    6. php artisan migrate:fresh --seed // perintah ini digunakan untuk migration database dan juga db seeding.
    7. $post->user->name // digunakan untuk mengambil data user berupa name dari model post yang berelasikan dengan model user.

Episode 10:
    1. Faker sebuah tools yang digunakan untuk membuat data palsu berbasis php.
    2. Factory adalah pabrik pembuat data otomatis, untuk membuat data ini, kita dibantu oleh faker agar data terlihat asli.
    3. php artisan make:factory <name-factory> // digunakan untuk membuat factory
    4. Method-method yang ada di factory akan dipanggil di file database seeder. 
    5. 'title' => $this->faker->sentence(mt_rand(2, 7)) // digunakan untuk mengisi data kolom title dengan method yang ada di faker yaitu sentence()
    6. 'faker_locale' => env('FAKER_LOCALE', 'en_US'), // digunakan untuk mengkonfigurasi bahasa yang digunakan untuk membuat data dengan faker, kita dapat menyimpannya di env variable.
    7. berikut contoh method yang digunakak untuk membuat data faker di factory class:
        public function definition()
        {
            return [
                'title' => $this->faker->sentence(mt_rand(2, 7)),
                'slug' => $this->faker->unique()->slug(mt_rand(1, 5)),
                'excerpt' => $this->faker->paragraph(),
                'body' => $this->faker->paragraph(mt_rand(10,20)),
                'user_id' => mt_rand(1, 5), 
                'category_id' => mt_rand(1, 3)
            ];
        }
    8. Berikut contoh code yang digunakan untuk menjalankan method yang ada di factory yang dituliskan di databaseSeeder.js
        Post::factory(20)->create();
        // artinya membuat data untuk model post sebanyak 20 kali berdasarkan function definition di file postFactory
    9. Post::latest()->get() // digunakan untuk mengambil data dari model post dengan urutan post yang paling terbaru
    
Episode 11:
    1. Kita bisa menggunakan satu view untuk berbagai route yang berbeda. Seperti view posts pada project ini.
    2. n+1 Problem adalah suatu masalah yang terjadi ketika aplikasi kita mengambil data dari database, dimana kita melakulan looping terhadap data kita. Oleh karena itu, kita melakukan pemanggilan ke database secara berulang-ulang.
    3. 
    

    
            
        